/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_PACKET_PB_H_INCLUDED
#define PB_PACKET_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _MeasurementType { 
    MeasurementType_UnknownMeasurementType = 0, 
    MeasurementType_environment = 1, 
    MeasurementType_energy = 2, 
    MeasurementType_lora = 3 
} MeasurementType;

typedef enum _SensorName { 
    SensorName_UnknownSensor = 0, 
    SensorName_HDC1080 = 1, 
    SensorName_SCD30 = 2, 
    SensorName_VEML7700 = 3, 
    SensorName_BMP388 = 4, 
    SensorName_LORA = 5, 
    SensorName_BATTERY = 6, 
    SensorName_EMONPI = 7, 
    SensorName_BOILERLIGHT = 8, 
    SensorName_DHT22 = 9, 
    SensorName_VIRTUAL = 20 
} SensorName;

/* Struct definitions */
typedef struct _Meta { 
    char device_id[13]; 
    char firmware[10]; 
} Meta;

typedef struct _SensorField { 
    SensorName sensor_name; 
    /* Environment */
    pb_size_t which_type;
    union {
        float temperature;
        float humidity;
        float pressure;
        float co2;
        float light;
        float power;
        bool boiler_state;
        int32_t boiler_on_time;
        float voltage;
        float rssi;
        float frequency_error;
        float snr;
        float dewpoint;
    } type; 
} SensorField;

typedef struct _Packet { 
    int32_t packet_id; 
    bool has_meta;
    Meta meta; 
    MeasurementType measurement_type; 
    pb_callback_t sensorFields; 
} Packet;


/* Helper constants for enums */
#define _MeasurementType_MIN MeasurementType_UnknownMeasurementType
#define _MeasurementType_MAX MeasurementType_lora
#define _MeasurementType_ARRAYSIZE ((MeasurementType)(MeasurementType_lora+1))

#define _SensorName_MIN SensorName_UnknownSensor
#define _SensorName_MAX SensorName_VIRTUAL
#define _SensorName_ARRAYSIZE ((SensorName)(SensorName_VIRTUAL+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Meta_init_default                        {"", ""}
#define SensorField_init_default                 {_SensorName_MIN, 0, {0}}
#define Packet_init_default                      {0, false, Meta_init_default, _MeasurementType_MIN, {{NULL}, NULL}}
#define Meta_init_zero                           {"", ""}
#define SensorField_init_zero                    {_SensorName_MIN, 0, {0}}
#define Packet_init_zero                         {0, false, Meta_init_zero, _MeasurementType_MIN, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define Meta_device_id_tag                       1
#define Meta_firmware_tag                        2
#define SensorField_sensor_name_tag              1
#define SensorField_temperature_tag              2
#define SensorField_humidity_tag                 3
#define SensorField_pressure_tag                 4
#define SensorField_co2_tag                      5
#define SensorField_light_tag                    6
#define SensorField_power_tag                    7
#define SensorField_boiler_state_tag             8
#define SensorField_boiler_on_time_tag           9
#define SensorField_voltage_tag                  20
#define SensorField_rssi_tag                     30
#define SensorField_frequency_error_tag          31
#define SensorField_snr_tag                      32
#define SensorField_dewpoint_tag                 40
#define Packet_packet_id_tag                     1
#define Packet_meta_tag                          2
#define Packet_measurement_type_tag              3
#define Packet_sensorFields_tag                  4

/* Struct field encoding specification for nanopb */
#define Meta_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   device_id,         1) \
X(a, STATIC,   SINGULAR, STRING,   firmware,          2)
#define Meta_CALLBACK NULL
#define Meta_DEFAULT NULL

#define SensorField_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    sensor_name,       1) \
X(a, STATIC,   ONEOF,    FLOAT,    (type,temperature,type.temperature),   2) \
X(a, STATIC,   ONEOF,    FLOAT,    (type,humidity,type.humidity),   3) \
X(a, STATIC,   ONEOF,    FLOAT,    (type,pressure,type.pressure),   4) \
X(a, STATIC,   ONEOF,    FLOAT,    (type,co2,type.co2),   5) \
X(a, STATIC,   ONEOF,    FLOAT,    (type,light,type.light),   6) \
X(a, STATIC,   ONEOF,    FLOAT,    (type,power,type.power),   7) \
X(a, STATIC,   ONEOF,    BOOL,     (type,boiler_state,type.boiler_state),   8) \
X(a, STATIC,   ONEOF,    INT32,    (type,boiler_on_time,type.boiler_on_time),   9) \
X(a, STATIC,   ONEOF,    FLOAT,    (type,voltage,type.voltage),  20) \
X(a, STATIC,   ONEOF,    FLOAT,    (type,rssi,type.rssi),  30) \
X(a, STATIC,   ONEOF,    FLOAT,    (type,frequency_error,type.frequency_error),  31) \
X(a, STATIC,   ONEOF,    FLOAT,    (type,snr,type.snr),  32) \
X(a, STATIC,   ONEOF,    FLOAT,    (type,dewpoint,type.dewpoint),  40)
#define SensorField_CALLBACK NULL
#define SensorField_DEFAULT NULL

#define Packet_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    packet_id,         1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  meta,              2) \
X(a, STATIC,   SINGULAR, UENUM,    measurement_type,   3) \
X(a, CALLBACK, REPEATED, MESSAGE,  sensorFields,      4)
#define Packet_CALLBACK pb_default_field_callback
#define Packet_DEFAULT NULL
#define Packet_meta_MSGTYPE Meta
#define Packet_sensorFields_MSGTYPE SensorField

extern const pb_msgdesc_t Meta_msg;
extern const pb_msgdesc_t SensorField_msg;
extern const pb_msgdesc_t Packet_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Meta_fields &Meta_msg
#define SensorField_fields &SensorField_msg
#define Packet_fields &Packet_msg

/* Maximum encoded size of messages (where known) */
/* Packet_size depends on runtime parameters */
#define Meta_size                                25
#define SensorField_size                         13

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
